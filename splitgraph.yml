repositories:
- namespace: mildbyte
  repository: postgres_fdw
  # Catalog-specific metadata for the repository. Optional.
  metadata:
    readme:
      text: Readme
    description: Description of the repository
    topics:
    - sample_topic
  # Data source settings for the repository. Optional.
  external:
    # Name of the credential that the plugin uses. This can also be a credential_id if the
    # credential is already registered on Splitgraph.
    credential: postgres_fdw
    plugin: postgres_fdw
    # Plugin-specific parameters matching the plugin's parameters schema
    params:
      host: ''  # REQUIRED. Remote hostname
      port: 0 # REQUIRED. Port
      dbname: '' # REQUIRED. Database name
      remote_schema: '' # REQUIRED. Remote schema name
    tables:
      sample_table:
        # Plugin-specific table parameters matching the plugin's schema
        options: {}
        # Schema of the table, a list of objects with `name` and `type`. If set to `[]`, will infer. 
        schema: []
    # Whether live querying is enabled for the plugin (creates a "live" tag in the
    # repository proxying to the data source). The plugin must support live querying.
    is_live: true
    # Ingestion schedule settings. Disable this if you're using GitHub Actions or other methods
    # to trigger ingestion.
    schedule:
- namespace: mildbyte
  repository: snowflake
  # Catalog-specific metadata for the repository. Optional.
  metadata:
    readme:
      text: Readme
    description: Description of the repository
    topics:
    - sample_topic
  # Data source settings for the repository. Optional.
  external:
    # Name of the credential that the plugin uses. This can also be a credential_id if the
    # credential is already registered on Splitgraph.
    credential: snowflake
    plugin: snowflake
    # Plugin-specific parameters matching the plugin's parameters schema
    params:
      database: ''  # REQUIRED. Snowflake database name
      schema: '' # Snowflake schema
      warehouse: '' # Warehouse name
      role: '' # Role
      batch_size: 0 # Default fetch size for remote queries
      envvars: {} # Environment variables to set on the engine side
    tables:
      sample_table:
        # Plugin-specific table parameters matching the plugin's schema
        options:
          subquery: ''  # Subquery for this table to run on the server side
        # Schema of the table, a list of objects with `name` and `type`. If set to `[]`, will infer. 
        schema: []
    # Whether live querying is enabled for the plugin (creates a "live" tag in the
    # repository proxying to the data source). The plugin must support live querying.
    is_live: true
    # Ingestion schedule settings. Disable this if you're using GitHub Actions or other methods
    # to trigger ingestion.
    schedule:
- namespace: mildbyte
  repository: dbt-sample
  external:
    plugin: dbt
    credential: dbt-sample
    params:
      sources:
      - dbt_source_name: mildbyte_postgres_fdw
        namespace: mildbyte
        repository: postgres_fdw
        hash_or_tag: latest
      - dbt_source_name: mildbyte_snowflake
        namespace: mildbyte
        repository: snowflake
        hash_or_tag: latest
    is_live: false
    tables: {}
  metadata:
    description: Sample dbt model
    readme: "## Sample dbt model\n\nThis is an autogenerated model referencing data\
      \ from:\n\n  * [/mildbyte/postgres_fdw](/mildbyte/postgres_fdw)\n  * [/mildbyte/snowflake](/mildbyte/snowflake)"
